// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  splash        Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]
  UserSolution  UserSolution[]
  puzzle        Puzzle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// PuzzleS AND SHIT

model Input {
  puzzleCollection   String
  day                Int
  id                 Int
  input              String
  answerPart1        String
  answerPart2        String
  puzzlePuzzleNumber Int
  puzzle             Puzzle         @relation(fields: [puzzleCollection, puzzlePuzzleNumber], references: [collection, puzzleNumber])
  UserSolution       UserSolution[]

  @@unique([puzzleCollection, puzzlePuzzleNumber, id])
  @@index([day])
}

model UserSolution {
  id                        Int       @id @default(autoincrement())
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    Int
  timeOpened                DateTime?
  puzzleName                String
  part_1_complete           Boolean   @default(false)
  part_2_complete           Boolean   @default(false)
  part_1_solution           Int?
  part_2_solution           Int?
  part_1_time_of_completion DateTime?
  part_2_time_of_completion DateTime?
  puzzleCollection          String
  puzzleNumber              Int
  inputId Int
  input                     Input     @relation(fields: [puzzleNumber, puzzleCollection, inputId], references: [puzzlePuzzleNumber, puzzleCollection, id])

  @@unique([userId, puzzleCollection, puzzleNumber])
  @@index([userId])
}

model Puzzle {
  collection        String
  puzzleNumber      Int
  part1Instructions String
  part2Instructions String
  Input             Input[]
  openedCount       Int      @default(0)
  completedCount    Int      @default(0)
  createdAt         DateTime @default(now())
  createdBy         Int?
  UserCreatedBy     User?    @relation(fields: [createdBy], references: [id])

  @@unique([collection, puzzleNumber])
}
